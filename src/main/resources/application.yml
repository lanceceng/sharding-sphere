server:
  port: 9961

spring:
  application:
    name: sharing-sphere-server
  main:
    allow-bean-definition-overriding: true #设置为true，表示后发现的bean会覆盖之前相同名称的bean。
  shardingsphere:
    props:
      # 打印sql
      sql.show: true
    datasource:
      names: ds0,ds1,slave0,slave1
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbcUrl: jdbc:mysql://localhost:3306/ds0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: root
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbcUrl: jdbc:mysql://localhost:3306/ds1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: root
      slave0:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbcUrl: jdbc:mysql://localhost:3306/slave0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: root
      slave1:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbcUrl: jdbc:mysql://localhost:3306/slave1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: root
    # 分片规则
    sharding:
      # 默认分库策略，未配置分片规则的表将通过默认数据源定位
#      defaultDatabaseStrategy:
#        inline:
#          algorithmExpression: ds$->{id % 2}
#          shardingColumn: id
      # 具体表策略
      tables:
        user:
          # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点。
          # 用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
          actualDataNodes: ms_ds${0..1}.user_${0..1}
          databaseStrategy:
            inline:
              shardingColumn: id
              algorithmExpression: ms_ds${id % 2} # 分库策略
          tableStrategy:
            inline:
              shardingColumn: age
              algorithmExpression: user_${age % 2} # 分表算法表达式
          # 自增列值生成器类型，缺省表示使用默认自增列值生成器。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID/LEAF_SEGMENT
          keyGenerator:
            type: SNOWFLAKE
            column: id
            # 雪花主键
            # type: SNOWFLAKE
        t_order:
          actual-data-nodes: ms_ds${0..1}.t_order_${0..1} #行表达式 ms_ds1.t_order1,$->{}是为了区分spring 的${}
          ## 指定分库规则
          database-strategy:
            inline:
              sharding-column: user_id
              algorithm-expression: ms_ds${user_id % 2}
          ## 指定分表规则
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: t_order_${order_id % 2}
          keyGenerator:
            type: SNOWFLAKE
            column: order_id
        t_order_item:
          actual-data-nodes: ms_ds${0..1}.t_order_item_${0..1}
          ## 通过hint方式自定义分库规则,这里需要根据user_id路由，但order_item表没有user_id，固自定义hint,然后绑定主表与子表，避免关联查询导致的全数据源路由
          database-strategy:
            hint:
              algorithmClassName: com.example.shardingSphere.config.HintSharding
          ## 指定分表规则
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: t_order_item_${order_id % 2}
          ## 雪花算法主键生成
          key-generator:
            column: product_id
            type: SNOWFLAKE
      # 绑定表 作用：绑定表——联表查询防止出现笛卡尔积现象（指分片规则一致的主表和子表）
      # 例如：t_order表和t_order_item表，均按照order_id分片，则此两张表互为绑定表关系。绑定表之间的多表关联查询不会出现笛卡尔积关联，关联查询效率将大大提升
      bindingTables:
        - t_order,t_order_item

      # 广播表（全局表）
      broadcastTables:
        - dist

      ## 读写分离:仅支持一主多从
      masterSlaveRules:
        ms_ds0: #主从节点的名称
          masterDataSourceName: ds0 #主节点
          slaveDataSourceNames: #从节点，数组形式
            - slave0
          loadBalanceAlgorithmType: ROUND_ROBIN
          #查询时的负载均衡算法，目前有2种算法，round_robin（轮询）和random（随机）
          # 算法接口是io.shardingjdbc.core.api.algorithm.masterslave.MasterSlaveLoadBalanceAlgorithm。
          # 实现类有RandomMasterSlaveLoadBalanceAlgorithm 和 RoundRobinMasterSlaveLoadBalanceAlgorithm。
        ms_ds1:
          masterDataSourceName: ds1
          slaveDataSourceNames:
            - slave1
          loadBalanceAlgorithmType: ROUND_ROBIN

      # 默认数据源
      defaultDataSourceName: ds0
      defaultTableStrategy:
        none:
      defaultKeyGenerator:
        type: SNOWFLAKE
        column: id

#mybatis-plus映射mapper文件
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.example.shardingSphere.entity